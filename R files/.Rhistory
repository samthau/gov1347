panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "grey"),
legend.key = element_rect(fill="transparent", colour=NA),
legend.position = "none") +
scale_fill_manual(values=c("dodgerblue2", "firebrick2")) +
scale_color_manual(values = c("deepskyblue", "firebrick")) + xlim(0,1)
state_pv_clean %>% filter(sim < 100, state %in% battle_states) %>%ggplot(aes( x = popvote, fill = candidate, color = candidate)) +
facet_wrap(facets = state ~.) +
geom_density(alpha = 0.5) +
labs(title = "2020 Presidential Election Based on Average Popular Vote Share",
subtitle = "From 10000 Simulations",
fill = "",
x = "Popular Vote Share", y = "Frequency") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "grey"),
legend.key = element_rect(fill="transparent", colour=NA)) +
scale_fill_manual(values=c("dodgerblue2", "firebrick2")) +
scale_color_manual(values = c("deepskyblue", "firebrick")) + xlim(0,1)
state_pv_clean %>% filter(sim < 100, state %in% battle_states) %>%ggplot(aes( x = popvote, fill = candidate, color = candidate)) +
facet_wrap(facets = state ~.) +
geom_histogram(alpha = 0.5) +
labs(title = "2020 Presidential Election Based on Average Popular Vote Share",
subtitle = "From 10000 Simulations",
fill = "",
x = "Popular Vote Share", y = "Frequency") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "grey"),
legend.key = element_rect(fill="transparent", colour=NA)) +
scale_fill_manual(values=c("dodgerblue2", "firebrick2")) +
scale_color_manual(values = c("deepskyblue", "firebrick")) + xlim(0,1)
victors <- ec_wins %>% group_by(winner) %>% count()
state_pv_clean %>% filter(sim < 100, state %in% battle_states) %>%ggplot(aes( x = popvote, fill = candidate, color = candidate)) +
facet_wrap(facets = state ~.) +
geom_density(alpha = 0.5) +
labs(title = "2020 Presidential Election Based on Average Popular Vote Share",
subtitle = "From 10000 Simulations",
fill = "",
x = "Popular Vote Share", y = "Frequency") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "grey"),
legend.key = element_rect(fill="transparent", colour=NA)) +
scale_fill_manual(values=c("dodgerblue2", "firebrick2")) +
scale_color_manual(values = c("deepskyblue", "firebrick")) + xlim(0,1)
state_pv_clean %>% filter(sim < 100, state %in% battle_states) %>%ggplot(aes( x = popvote, fill = candidate, color = candidate)) +
facet_wrap(facets = state ~.) +
geom_density(alpha = 0.5) +
labs(title = "2020 Presidential Election Based on Average Popular Vote Share",
subtitle = "From 10000 Simulations",
fill = "",
x = "Popular Vote Share", y = "Frequency") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "grey"),
legend.key = element_rect(fill="transparent", colour=NA)) +
scale_fill_manual(values=c("dodgerblue2", "firebrick2"), labels = c("Biden", "Trump")) +
scale_color_manual(values = c("deepskyblue", "firebrick"),labels = c("Biden", "Trump")) + xlim(0,1)
state_pv_clean %>% filter(sim < 100, state %in% battle_states) %>%ggplot(aes( x = popvote, fill = candidate, color = candidate)) +
facet_wrap(facets = state ~.) +
geom_density(alpha = 0.5) +
labs(title = "2020 Presidential Election Based on Average Popular Vote Share",
subtitle = "From 10000 Simulations",
fill = "",
x = "Popular Vote Share", y = "Frequency") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "grey"),
legend.key = element_rect(fill="transparent", colour=NA)) +
scale_fill_manual(name = "Candidate Vote Share",values=c("dodgerblue2", "firebrick2"), labels = c("Biden", "Trump")) +
scale_color_manual(name = "Candidate Vote Share",values = c("deepskyblue", "firebrick"),labels = c("Biden", "Trump")) + xlim(0,1)
state_pv_clean %>% filter(state %in% battle_states) %>%ggplot(aes( x = popvote, fill = candidate, color = candidate)) +
facet_wrap(facets = state ~.) +
geom_density(alpha = 0.5) +
labs(title = "Vote Share in Battleground States",
subtitle = "From 10000 Simulations",
fill = "",
x = "Popular Vote Share", y = "Frequency") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "grey"),
legend.key = element_rect(fill="transparent", colour=NA)) +
scale_fill_manual(name = "Candidate Vote Share",values=c("dodgerblue2", "firebrick2"), labels = c("Biden", "Trump")) +
scale_color_manual(name = "Candidate Vote Share",values = c("deepskyblue", "firebrick"),labels = c("Biden", "Trump")) + xlim(0,1)
view(state_count)
state_pv_clean %>% filter(state %in% battle_states) %>%ggplot(aes( x = popvote, fill = candidate, color = candidate)) +
facet_wrap(facets = state ~.) +
geom_density(alpha = 0.5) +
labs(title = "Vote Share in Battleground States",
subtitle = "From 10000 Simulations",
fill = "",
x = "Popular Vote Share", y = "Frequency") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "grey"),
legend.key = element_rect(fill="transparent", colour=NA)) +
scale_fill_manual(name = "Candidate Vote Share",values=c("dodgerblue2", "firebrick2"), labels = c("Biden", "Trump")) +
scale_color_manual(name = "Candidate Vote Share",values = c("deepskyblue", "firebrick"),labels = c("Biden", "Trump")) + xlim(0,1)
battle_states <- c("AZ", "FL", "GA", "IA", "ME", "MI", "MN", "NC", "NE", "NH","NV", "OH",
"PA", "TX","SC", "WI")
state_pv_clean %>% filter(state %in% battle_states) %>%ggplot(aes( x = popvote, fill = candidate, color = candidate)) +
facet_wrap(facets = state ~.) +
geom_density(alpha = 0.5) +
labs(title = "Vote Share in Battleground States",
subtitle = "From 10000 Simulations",
fill = "",
x = "Popular Vote Share", y = "Frequency") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "grey"),
legend.key = element_rect(fill="transparent", colour=NA)) +
scale_fill_manual(name = "Candidate Vote Share",values=c("dodgerblue2", "firebrick2"), labels = c("Biden", "Trump")) +
scale_color_manual(name = "Candidate Vote Share",values = c("deepskyblue", "firebrick"),labels = c("Biden", "Trump")) + xlim(0,1)
state_pv_clean %>% filter(state %in% battle_states) %>%ggplot(aes( x = popvote, fill = candidate, color = candidate)) +
facet_wrap(facets = state ~.) +
geom_density(alpha = 0.5) +
labs(title = "Density of Simulated Vote Share in Battleground States",
subtitle = "From 10000 Simulations",
fill = "",
x = "Popular Vote Share", y = "Frequency") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "grey"),
legend.key = element_rect(fill="transparent", colour=NA)) +
scale_fill_manual(name = "Candidate Vote Share",values=c("dodgerblue2", "firebrick2"), labels = c("Biden", "Trump")) +
scale_color_manual(name = "Candidate Vote Share",values = c("deepskyblue", "firebrick"),labels = c("Biden", "Trump")) + xlim(0,1)
ggsave(battleground)
state_pv_clean %>% filter(state %in% battle_states) %>%ggplot(aes( x = popvote, fill = candidate, color = candidate)) +
facet_wrap(facets = state ~.) +
geom_density(alpha = 0.5) +
labs(title = "Density of Simulated Vote Share in Battleground States",
subtitle = "From 10000 Simulations",
fill = "",
x = "Popular Vote Share", y = "Frequency") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "grey"),
legend.key = element_rect(fill="transparent", colour=NA)) +
scale_fill_manual(name = "Candidate Vote Share",values=c("dodgerblue2", "firebrick2"), labels = c("Biden", "Trump")) +
scale_color_manual(name = "Candidate Vote Share",values = c("deepskyblue", "firebrick"),labels = c("Biden", "Trump")) + xlim(0,1)
ggsave(battleground)
ggsave("battleground.png")
view(ec_wins)
ec_wins <- ec_results %>% spread(win, x) %>% mutate(winner = case_when(Biden > Trump ~ "Biden",
Trump > Biden ~ "Trump",
Biden == Trump ~ "Tie"))
view(ec_wins)
victors <- ec_wins %>% group_by(winner) %>% count()
victors
ec_wins %>% filter(winner = "Trump")
ec_wins %>% filter(winner == "Trump")
plot_usmap(data = avg_popvote_state, regions = "states", values = "margin", labels = TRUE) +
scale_fill_gradient2(
high = "red",
mid = "white",
low = "blue",
breaks = c(-0.50,0,0.50),
limits = c(-0.50,0.50),
name = "Trump Popular Vote Margin"
) +
theme_void() +
theme(strip.text = element_text(size = 12),
aspect.ratio=1) + labs(title = "2020 Presidential Election Based on Average Popular Vote Share",
subtitle = "From 10000 Simulations",
fill = "") +
scale_fill_manual(values=c("dodgerblue2", "f")) +
state_count <- results_df %>% group_by(state) %>% count(win)
plot_usmap(data = avg_popvote_state, regions = "states", values = "margin", labels = TRUE) +
scale_fill_gradient2(
high = "red",
mid = "white",
low = "blue",
breaks = c(-0.50,0,0.50),
limits = c(-0.50,0.50),
name = "Trump Popular Vote Margin"
) +
theme_void() +
theme(strip.text = element_text(size = 12),
aspect.ratio=1) + labs(title = "2020 Presidential Election Based on Average Popular Vote Share",
subtitle = "From 10000 Simulations",
fill = "")
plot_usmap(data = avg_popvote_state, regions = "states", values = "margin") +
scale_fill_gradient2(
high = "firebrick2",
mid = "white",
low = "dodgerblue2",
breaks = c(-0.50,0,0.50),
limits = c(-0.50,0.50),
name = "Trump Popular Vote Margin"
) +
theme_void() +
theme(strip.text = element_text(size = 12),
aspect.ratio=1) + labs(title = "2020 Presidential Election Based on Average Popular Vote Share",
subtitle = "From 10000 Simulations",
fill = "")
plot_usmap(data = avg_popvote_state, regions = "states", values = "margin") +
scale_fill_gradient2(
high = "firebrick2",
mid = "white",
low = "dodgerblue2",
breaks = c(-0.50,0,0.50),
limits = c(-0.50,0.50),
name = "Trump Popular Vote Margin"
) +
theme_void() +
theme(strip.text = element_text(size = 12),
aspect.ratio=1, legend.position = "bottom") + labs(title = "2020 Presidential Election Based on Average Popular Vote Share",
subtitle = "From 10000 Simulations",
fill = "")
ggsave("avg_pop_vote_map.png")
## load in atlernate variances
pres_polls <- read.csv("../Data/president_polls.csv")
View(pres_polls)
## load in atlernate variances
pres_polls <- read.csv("../Data/president_polls.csv") %>%
mutate(party = case_when(candidate_name == "Donald Trump" ~ "republican",
candidate_name == "Joseph R. Biden Jr." ~ "democrat"),
poll_date = as.Date(poll_date, "%m/%d/%Y")) %>%
mutate(days_left = round(difftime(elxnday_2020, poll_date, unit="days")),
weeks_left = round(difftime(elxnday_2020, poll_date, unit="weeks")),
before_convention = case_when(poll_date < dnc_2020 & party == "democrat" ~ TRUE,
poll_date < rnc_2020 & party == "republican" ~ TRUE,
TRUE ~ FALSE)) %>% filter(!is.na(party))
## load in atlernate variances
pres_polls <- read.csv("../Data/president_polls.csv") %>%
mutate(party = case_when(candidate_name == "Donald Trump" ~ "republican",
candidate_name == "Joseph R. Biden Jr." ~ "democrat"),
poll_date = as.Date(end_date, "%m/%d/%Y")) %>%
mutate(days_left = round(difftime(elxnday_2020, poll_date, unit="days")),
weeks_left = round(difftime(elxnday_2020, poll_date, unit="weeks")),
before_convention = case_when(poll_date < dnc_2020 & party == "democrat" ~ TRUE,
poll_date < rnc_2020 & party == "republican" ~ TRUE,
TRUE ~ FALSE)) %>% filter(!is.na(party))
view(pres_polls)
## load in atlernate variances
pres_polls <- read.csv("../Data/president_polls.csv") %>%
mutate(state = state.abb[match(state, state.name)],
party = case_when(candidate_name == "Donald Trump" ~ "republican",
candidate_name == "Joseph R. Biden Jr." ~ "democrat"),
end_date = mdy(end_date),
poll_date = as.Date(end_date, "%m/%d/%Y"),
election_date = mdy(election_date),
days_left = round(difftime(election_date, poll_date, unit="days")),
weeks_left = round(difftime(election_date, poll_date, unit="weeks"))) %>%
filter(!is.na(party))
library(lubridate)
## load in atlernate variances
pres_polls <- read.csv("../Data/president_polls.csv") %>%
mutate(state = state.abb[match(state, state.name)],
party = case_when(candidate_name == "Donald Trump" ~ "republican",
candidate_name == "Joseph R. Biden Jr." ~ "democrat"),
end_date = mdy(end_date),
poll_date = as.Date(end_date, "%m/%d/%Y"),
election_date = mdy(election_date),
days_left = round(difftime(election_date, poll_date, unit="days")),
weeks_left = round(difftime(election_date, poll_date, unit="weeks"))) %>%
filter(!is.na(party))
view(pres_polls)
poll_var <- pres_polls %>% filter() %>% (days_left <= 21) %>%
group_by(state, party) %>% summarize(poll_sd = sd(pct/100))
## load in atlernate variances
pres_polls <- read.csv("../Data/president_polls.csv") %>%
mutate(state = state.abb[match(state, state.name)],
party = case_when(candidate_name == "Donald Trump" ~ "republican",
candidate_name == "Joseph R. Biden Jr." ~ "democrat"),
end_date = mdy(end_date),
poll_date = as.Date(end_date, "%m/%d/%Y"),
election_date = mdy(election_date),
days_left = round(difftime(election_date, poll_date, unit="days")),
weeks_left = round(difftime(election_date, poll_date, unit="weeks"))) %>%
filter(!is.na(party))
poll_var <- pres_polls %>% filter() %>% (days_left <= 21) %>%
group_by(state, party) %>% summarize(poll_sd = sd(pct/100))
pres_polls$days_left
poll_var <- pres_polls %>% filter(days_left <= 21) %>%
group_by(state, party) %>% summarize(poll_sd = sd(pct/100))
view(poll_var)
view(poll_2020_var)
view(poll_2020_var)
poll_var <- pres_polls %>% filter(days_left <= 21) %>%
group_by(state, party) %>% summarize(poll_var = sd(pct/100))
view(poll_var)
poll_var_dc <- poll_2020_var %>% filter(state == "DC")
poll_var_edited <- pres_polls %>% filter(days_left <= 21) %>%
group_by(state, party) %>% summarize(poll_var = sd(pct/100))
na.omit(poll_var_edited)
poll_var_full <- rbind(poll_var_edited, poll_var_dc)
## attach variances
trump_pred_df <- data.frame(trump_pred) %>% left_join(poll_var_full %>% filter(party == "republican"),
by = c("state" = "state"))
biden_pred_df <- data.frame(biden_pred) %>% left_join(poll_var_full %>% filter(party == "democrat"),
by = c("state" = "state"))
view(trump_pred_df)
## correlation matricies
vote_pred <- c("rdi_q2", "gdp", "avg_poll", "Black", "Hispanic", "Asian", "White", "Male",
"age20", "age3045", "age4565", "last_vote_margin")
biden_correlation <- corSimMat(biden_df %>% dplyr::select(vote_pred))
trump_correlation <- corSimMat(trump_df %>% dplyr::select(vote_pred))
## covariance matricies
cor2cov <- function(R,S){
diag(S) %*% R %*% diag(S)
}
biden_cov <- cor2cov(biden_correlation, biden_pred_df$poll_var)
trump_cov <- cor2cov(trump_correlation, trump_pred_df$poll_var)
##get mean and variance for uniform polling error
nat_popvote_clean <- nat_popvote_df %>% filter(party == "republican") %>%
dplyr::select(year, pv) %>%
left_join(nat_popvote_df %>% filter(party == "democrat") %>%
dplyr::select(year,pv), by = c("year" = "year"))
colnames(nat_popvote_clean) <- c("year", "rpv", "dpv")
nat_poll_clean <- nat_poll_df %>% filter(days_left <= 7) %>%
dplyr::select(year, party, avg_support) %>% group_by(year, party) %>%
summarize(avg_support = mean(avg_support))
nat_poll_clean2 <- nat_poll_clean %>%
filter(party == "republican") %>%
dplyr::select(year, avg_support) %>%
left_join(nat_poll_clean %>%
filter(party == "democrat") %>%
dplyr::select(year, avg_support), by = c("year" = "year"))
colnames(nat_poll_clean2) <- c("year", "r_poll", "d_poll")
nat_var <- nat_popvote_clean %>%
dplyr::select(year, rpv, dpv) %>%
left_join(nat_poll_clean2 %>%
dplyr::select(year, r_poll, d_poll), by = c("year" = "year")) %>%
mutate(rep_error = (rpv - r_poll)/100, dem_error = (dpv - d_poll)/100)
nat_var <- na.omit(nat_var)
nat_mean_rep <- mean(nat_var$rep_error)
nat_mean_dem <- mean(nat_var$dem_error)
nat_var_rep <- var(nat_var$rep_error)
nat_var_dem <- var(nat_var$dem_error)
party_cov <- cov(nat_var$rep_error, nat_var$dem_error)
cov_mat <- rbind(c(nat_mean_rep, party_cov),c(party_cov, nat_mean_dem))
## Draws for turnout and vote share
set.seed(1347)
count <- 10000
trump_sims <- as.data.frame(t(mvrnorm(n = count, trump_pred_df$vote_share, trump_cov)))
trump_sims$state <- trump_pred_df$state
biden_sims <- as.data.frame(t(mvrnorm(n = count, biden_pred_df$vote_share, biden_cov)))
biden_sims$state <- biden_pred_df$state
nat_error_biden <- rstable(count, alpha = 2, beta = 0, gamma = sqrt(0.5*nat_var_dem),
delta = nat_mean_dem)
nat_error_trump <- rstable(count, alpha = 2, beta = 0, gamma = sqrt(0.5*nat_var_rep),
delta = nat_mean_rep)
turnout_sims <- NULL
for(st in turnout_pred_df$state){
temp_mean <- turnout_2020_pred %>% filter(state == st) %>% dplyr::select(turnout)
output <- cbind.data.frame(st, rpois(count, as.numeric(temp_mean)) , seq(from = 1, to = count, by = 1))
turnout_sims <- rbind(turnout_sims, output)
}
colnames(turnout_sims) <- c("state", "turnout", "sim")
## consolidate to results
elec_col <- read_csv("../Data/ElectoralCollegePost1948_adj.csv") %>% filter(Year==2020) %>%
dplyr::select(State, EC)
elec_col <- remove_empty(elec_col, which = c("cols"), quiet = TRUE)
elec_col$State <- c(state.abb, 'DC')[match(elec_col$State, c(state.name, 'District of Columbia'))]
results_df <- NULL
for(st in turnout_2020_pred$state){
p_biden <- t(biden_sims %>% filter(state == st) %>% dplyr::select(-state) + nat_error_biden)
p_trump <- t(trump_sims %>% filter(state == st) %>% dplyr::select(-state) + nat_error_trump)
s_turnout <- t(turnout_sims %>% filter(state == st) %>% dplyr::select(-state,-sim))
v_trump <- rbinom(n = count, size = s_turnout, prob = p_trump)
v_biden <- rbinom(n = count, size = s_turnout, prob = p_biden)
ec_val <- elec_col %>% filter(State == st) %>% dplyr::select(EC)
res_st <- cbind.data.frame(st, v_trump, v_biden,
ec_val, seq(from = 1, to = count, by = 1))
colnames(res_st) <- c("state", "trump_v", "biden_v", "EC", "sim")
results_df <- rbind(results_df, res_st)
}
results_df <- results_df %>% mutate(win = case_when(trump_v > biden_v ~ "Trump",
trump_v < biden_v ~ "Biden",
trump_v == biden_v ~ "Tie"))
ec_results <- aggregate(results_df$EC, results_df %>% dplyr::select(win, sim), FUN = sum)
biden_pv <- aggregate(results_df$biden_v, results_df %>% dplyr::select(sim), FUN = sum)
trump_pv <- aggregate(results_df$trump_v, results_df %>% dplyr::select(sim), FUN = sum)
## ec plot
biden_ec_plot <- ggplot(ec_results %>% filter(win == "Biden"), aes(x = x, fill = win), alpha = 0.75 ) +
geom_density(alpha =0.25, color = "dodgerblue2") +
geom_histogram(bins = max(ec_results$x) - min(ec_results$x), aes(y = ..density..),position = 'identity') +
labs(x="Electoral College Results", y="Frequency", color = "Legend") + ggtitle("Predicted Electoral College Results") +
scale_fill_manual(values=c("dodgerblue2")) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "grey"),
legend.key = element_rect(fill="transparent", colour=NA),
legend.position = "none")+
scale_color_manual(values=c("deepskyblue")) +
labs(title = "Biden Electoral College Votes from 10000 Simulations") + xlim(0,538)
trump_ec_plot <- ggplot(ec_results %>% filter(win == "Trump"), aes(x = x, fill = win), alpha = 0.75 ) +
geom_density(alpha =0.25, color = "firebrick2") +
geom_histogram(bins = max(ec_results$x) - min(ec_results$x), aes(y = ..density..),position = 'identity') +
labs(x="Electoral College Results", y="Frequency", color = "Legend") + ggtitle("Predicted Electoral College Results") +
scale_fill_manual(values=c("firebrick2")) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "grey"),
legend.key = element_rect(fill="transparent", colour=NA),
legend.position = "none")+
scale_color_manual(values=c("firebrick")) +
labs(title = "Trump Electoral College Votes from 10000 Simulations") + xlim(0,538)
ec_plot <- gridExtra::grid.arrange(trump_ec_plot, biden_ec_plot)
## popular vote plot
pv_df <- biden_pv %>% left_join(trump_pv, by = c("sim" = "sim"))
colnames(pv_df) <- c("sim", "biden_votes", "trump_votes")
pv_df <- pv_df %>% mutate(biden_pv = biden_votes/(biden_votes+trump_votes),
trump_pv = trump_votes/(biden_votes+trump_votes))
biden_pv_plot <- ggplot(pv_df %>% dplyr::select(biden_pv), aes(x = biden_pv), alpha = 0.75) +
geom_histogram(bins = 100,
aes(y = ..density..),
position = 'identity',
color = "dodgerblue2",
fill = "deepskyblue") +
labs(x="Popular Vote Results", y="Frequency", color = "Legend") + ggtitle("Predicted Popular Vote Results") +
scale_fill_manual(values=c("dodgerblue2")) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "grey"),
legend.key = element_rect(fill="transparent", colour=NA),
legend.position = "none")+
labs(title = "Biden Popular Vote Percent from 10000 Simulations") + xlim(0,1)
trump_pv_plot <- ggplot(pv_df %>% dplyr::select(trump_pv), aes(x = trump_pv), alpha = 0.75) +
geom_histogram(bins = 100,
aes(y = ..density..),
position = 'identity',
color = "firebrick",
fill = "firebrick2") +
labs(x="Popular Vote Results", y="Frequency", color = "Legend") + ggtitle("Predicted Popular Vote Results") +
scale_fill_manual(values=c("dodgerblue2")) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "grey"),
legend.key = element_rect(fill="transparent", colour=NA),
legend.position = "none")+
labs(title = "Trump Popular Vote Percent from 10000 Simulations") + xlim(0,1)
pv_plot <- gridExtra::grid.arrange(trump_pv_plot, biden_pv_plot, ncol = 2)
## state by state results
avg_popvote_state <- results_df %>% mutate(trump_pv = trump_v/(trump_v+biden_v),
biden_pv = biden_v/(trump_v+biden_v)) %>%
group_by(state) %>%
summarize(trump_pv = mean(trump_pv), biden_pv = mean(biden_pv)) %>%
mutate(win = case_when(trump_pv > biden_pv ~ "Trump",
biden_pv > trump_pv ~ "Biden"))
avg_popvote_table <- avg_popvote_state %>% dplyr::select(state, trump_pv, biden_pv)
colnames(avg_popvote_table) <- c("State", "Trump Popular Vote", "Biden Popular Vote")
pop_vote_plot <- avg_popvote_state %>%
ggplot(aes(state = state, fill = fct_relevel(win, "Trump", "Biden"))) +
geom_statebins() +
theme_statebins() +
labs(title = "2020 Presidential Election Based on Average Popular Vote Share",
subtitle = "From 10000 Simulations",
fill = "") +
scale_fill_manual(values=c("#619CFF", "#CCCCCC", "#F8766D"), breaks = c("Biden", "N/A", "Trump"))
avg_popvote_state <- avg_popvote_state %>% mutate(margin = trump_pv - biden_pv)
plot_usmap(data = avg_popvote_state, regions = "states", values = "margin") +
scale_fill_gradient2(
high = "firebrick2",
mid = "white",
low = "dodgerblue2",
breaks = c(-0.50,0,0.50),
limits = c(-0.50,0.50),
name = "Trump Popular Vote Margin"
) +
theme_void() +
theme(strip.text = element_text(size = 12),
aspect.ratio=1, legend.position = "bottom") + labs(title = "2020 Presidential Election Based on Average Popular Vote Share",
subtitle = "From 10000 Simulations",
fill = "")
sstate_count <- results_df %>% group_by(state) %>% count(win)
ec_wins <- ec_results %>% spread(win, x) %>% mutate(winner = case_when(Biden > Trump ~ "Biden",
Trump > Biden ~ "Trump",
Biden == Trump ~ "Tie"))
state_pv <- results_df %>%
mutate(biden_pv= biden_v/(biden_v+trump_v), trump_pv = trump_v/(biden_v+trump_v))
biden_pv_clean <- cbind.data.frame(state_pv %>% dplyr::select(state, sim, biden_pv), rep("Biden", count) )
trump_pv_clean <- cbind.data.frame(state_pv %>% dplyr::select(state, sim, trump_pv), rep("Trump", count) )
colnames(biden_pv_clean) <- c("state", "sim", "popvote", "candidate")
colnames(trump_pv_clean) <- c("state", "sim", "popvote", "candidate")
state_pv_clean <- rbind.data.frame(biden_pv_clean, trump_pv_clean)
battle_states <- c("AZ", "FL", "GA", "IA", "ME", "MI", "MN", "NC", "NE", "NH","NV", "OH",
"PA", "TX","SC", "WI")
state_pv_clean %>% filter(state %in% battle_states) %>%ggplot(aes( x = popvote, fill = candidate, color = candidate)) +
facet_wrap(facets = state ~.) +
geom_density(alpha = 0.5) +
labs(title = "Density of Simulated Vote Share in Battleground States",
subtitle = "From 10000 Simulations",
fill = "",
x = "Popular Vote Share", y = "Frequency") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "grey"),
legend.key = element_rect(fill="transparent", colour=NA)) +
scale_fill_manual(name = "Candidate Vote Share",values=c("dodgerblue2", "firebrick2"), labels = c("Biden", "Trump")) +
scale_color_manual(name = "Candidate Vote Share",values = c("deepskyblue", "firebrick"),labels = c("Biden", "Trump")) + xlim(0,1)
victors <- ec_wins %>% group_by(winner) %>% count()
view(victors)
view(sstate_count)
