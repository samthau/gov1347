pred_prob_biden <- as.data.frame(pred_prob_biden)
pred_prob_biden <- pred_prob_biden %>% mutate(var = se.fit^2)
pred_prob_biden <- pred_prob_biden %>% mutate(fit = chl_log_demo$family$linkinv(fit), se.fit = inc_log_demo$family$linkinv(se.fit))
estBetaParams <- function(mu, var) {
alpha <- ((1 - mu) / var - 1 / mu) * mu ^ 2
beta <- alpha * (1 / mu - 1)
return(params = list(alpha = alpha, beta = beta))
}
beta_vals_trump <- estBetaParams(pred_prob_trump$fit, pred_prob_trump$var)
beta_vals_trump <- do.call(cbind.data.frame, beta_vals_trump)
beta_vals_trump$state <- pred_prob_trump$state
pred_prob_trump <- pred_prob_trump %>% left_join(beta_vals_trump, by = c("state" = "state"))
beta_vals_biden <- estBetaParams(pred_prob_biden$fit, pred_prob_biden$var)
beta_vals_biden <- do.call(cbind.data.frame, beta_vals_biden)
beta_vals_biden$state <- pred_prob_biden$state
pred_prob_biden <- pred_prob_biden %>% left_join(beta_vals_biden, by = c("state" = "state"))
sim_df <- pred_prob_trump %>% left_join(pred_prob_biden, by = c("state"= "state")) %>%
left_join(elec_col[ , colSums(is.na(elec_col)) == 0], by = c("state" = "State")) %>% left_join(vep_df %>% filter(year == 2016),
by = c("state"="state"))
colnames(sim_df) <- c("trump_p", "t_se","res_t","state","t_v","alpha_trump","beta_trump", "biden_p", "b_se","res_b","b_v","alpha_biden","beta_biden", "year", "EC", "temp", "VEP", "VAP")
sim_df <- sim_df %>% select(state, trump_p, biden_p,alpha_trump, beta_trump, alpha_biden, beta_biden, EC, VEP)
sim_df <- sim_df %>% mutate_at(vars(VEP), funs(round(.)))
vep_std <- vep_df %>%
group_by(state) %>%
summarise(vep_sd = sd(VEP))
sim_df <- sim_df %>% left_join(vep_std, by = c("state" = "state"))
results_df <- data.frame(state = character(0), trump_v = numeric(0),
biden_v = numeric(0), EC = numeric(0)  , sim = numeric(0))
count = 10000
for(st in sim_df$state){
temp_df <- sim_df %>% filter(state == st)
trump_vote <- rbinom(n=count, size = round(rnorm(count, temp_df$VEP, temp_df$vep_sd)), prob = rbeta(count, temp_df$alpha_trump, temp_df$beta_trump))
biden_vote <- rbinom(n=count, size = round(rnorm(count, temp_df$VEP, sd = temp_df$vep_sd)), prob = rbeta(count, temp_df$alpha_biden, temp_df$beta_biden))
res_st <- cbind.data.frame(st, trump_vote, biden_vote, rep(temp_df$EC, count), seq(from = 1, to = count, by = 1))
colnames(res_st) = c("state", "trump_v", "biden_v", "EC","sim")
results_df <- rbind(results_df, res_st)
}
results_df <- results_df %>% mutate(win = case_when(trump_v > biden_v ~ "Trump",
trump_v < biden_v ~ "Biden",
trump_v == biden_v ~ "Tie"))
ec_results <- aggregate(results_df$EC, results_df %>% select(win, sim), FUN = sum)
biden_votes <- aggregate(results_df$biden_v, results_df %>% select(sim), FUN = sum)
trump_votes <- aggregate(results_df$trump_v, results_df %>% select(sim), FUN = sum)
warnings()
View(sim_df)
# make state predictions and label them
trump_df <- pred_data_df %>% filter(incumbent_party == TRUE)
biden_df <- pred_data_df %>% filter(incumbent_party == FALSE)
pred_prob_trump <- as.data.frame(predict(inc_log_demo, newdata = trump_df, type = "link", se.fit = TRUE))
pred_prob_trump$state <- trump_df$state
pred_prob_trump <- as.data.frame(pred_prob_trump)
pred_prob_trump <- pred_prob_trump %>% mutate(fit = inc_log_demo$family$linkinv(fit), se.fit = inc_log_demo$family$linkinv(se.fit))
pred_prob_trump <- pred_prob_trump %>% mutate(var = se.fit^2)
pred_prob_biden <- as.data.frame(predict(chl_log_demo, newdata = biden_df, type = "link", se.fit = TRUE))
pred_prob_biden$state <- biden_df$state
pred_prob_biden <- as.data.frame(pred_prob_biden)
pred_prob_biden <- pred_prob_biden %>% mutate(fit = chl_log_demo$family$linkinv(fit), se.fit = inc_log_demo$family$linkinv(se.fit))
pred_prob_biden <- pred_prob_biden %>% mutate(var = se.fit^2)
estBetaParams <- function(mu, var) {
alpha <- ((1 - mu) / var - 1 / mu) * mu ^ 2
beta <- alpha * (1 / mu - 1)
return(params = list(alpha = alpha, beta = beta))
}
beta_vals_trump <- estBetaParams(pred_prob_trump$fit, pred_prob_trump$var)
beta_vals_trump <- do.call(cbind.data.frame, beta_vals_trump)
beta_vals_trump$state <- pred_prob_trump$state
pred_prob_trump <- pred_prob_trump %>% left_join(beta_vals_trump, by = c("state" = "state"))
beta_vals_biden <- estBetaParams(pred_prob_biden$fit, pred_prob_biden$var)
beta_vals_biden <- do.call(cbind.data.frame, beta_vals_biden)
beta_vals_biden$state <- pred_prob_biden$state
pred_prob_biden <- pred_prob_biden %>% left_join(beta_vals_biden, by = c("state" = "state"))
sim_df <- pred_prob_trump %>% left_join(pred_prob_biden, by = c("state"= "state")) %>%
left_join(elec_col[ , colSums(is.na(elec_col)) == 0], by = c("state" = "State")) %>% left_join(vep_df %>% filter(year == 2016),
by = c("state"="state"))
colnames(sim_df) <- c("trump_p", "t_se","res_t","state","t_v","alpha_trump","beta_trump", "biden_p", "b_se","res_b","b_v","alpha_biden","beta_biden", "year", "EC", "temp", "VEP", "VAP")
sim_df <- sim_df %>% select(state, trump_p, biden_p,alpha_trump, beta_trump, alpha_biden, beta_biden, EC, VEP)
sim_df <- sim_df %>% mutate_at(vars(VEP), funs(round(.)))
vep_std <- vep_df %>%
group_by(state) %>%
summarise(vep_sd = sd(VEP))
sim_df <- sim_df %>% left_join(vep_std, by = c("state" = "state"))
results_df <- data.frame(state = character(0), trump_v = numeric(0),
biden_v = numeric(0), EC = numeric(0)  , sim = numeric(0))
count = 10000
for(st in sim_df$state){
temp_df <- sim_df %>% filter(state == st)
trump_vote <- rbinom(n=count, size = round(rnorm(count, temp_df$VEP, temp_df$vep_sd)), prob = rbeta(count, temp_df$alpha_trump, temp_df$beta_trump))
biden_vote <- rbinom(n=count, size = round(rnorm(count, temp_df$VEP, sd = temp_df$vep_sd)), prob = rbeta(count, temp_df$alpha_biden, temp_df$beta_biden))
res_st <- cbind.data.frame(st, trump_vote, biden_vote, rep(temp_df$EC, count), seq(from = 1, to = count, by = 1))
colnames(res_st) = c("state", "trump_v", "biden_v", "EC","sim")
results_df <- rbind(results_df, res_st)
}
results_df <- results_df %>% mutate(win = case_when(trump_v > biden_v ~ "Trump",
trump_v < biden_v ~ "Biden",
trump_v == biden_v ~ "Tie"))
ec_results <- aggregate(results_df$EC, results_df %>% select(win, sim), FUN = sum)
biden_votes <- aggregate(results_df$biden_v, results_df %>% select(sim), FUN = sum)
trump_votes <- aggregate(results_df$trump_v, results_df %>% select(sim), FUN = sum)
View(sim_df)
trump_df <- pred_data_df %>% filter(incumbent_party == TRUE)
biden_df <- pred_data_df %>% filter(incumbent_party == FALSE)
pred_prob_trump <- as.data.frame(predict(inc_log_demo, newdata = trump_df, type = "response", se.fit = TRUE))
pred_prob_trump$state <- trump_df$state
pred_prob_trump <- as.data.frame(pred_prob_trump)
pred_prob_trump <- pred_prob_trump %>% mutate(var = se.fit^2)
pred_prob_biden <- as.data.frame(predict(chl_log_demo, newdata = biden_df, type = "response", se.fit = TRUE))
pred_prob_biden$state <- biden_df$state
pred_prob_biden <- as.data.frame(pred_prob_biden)
pred_prob_biden <- pred_prob_biden %>% mutate(var = se.fit^2)
estBetaParams <- function(mu, var) {
alpha <- ((1 - mu) / var - 1 / mu) * mu ^ 2
beta <- alpha * (1 / mu - 1)
return(params = list(alpha = alpha, beta = beta))
}
beta_vals_trump <- estBetaParams(pred_prob_trump$fit, pred_prob_trump$var)
beta_vals_trump <- do.call(cbind.data.frame, beta_vals_trump)
beta_vals_trump$state <- pred_prob_trump$state
pred_prob_trump <- pred_prob_trump %>% left_join(beta_vals_trump, by = c("state" = "state"))
beta_vals_biden <- estBetaParams(pred_prob_biden$fit, pred_prob_biden$var)
beta_vals_biden <- do.call(cbind.data.frame, beta_vals_biden)
beta_vals_biden$state <- pred_prob_biden$state
pred_prob_biden <- pred_prob_biden %>% left_join(beta_vals_biden, by = c("state" = "state"))
sim_df <- pred_prob_trump %>% left_join(pred_prob_biden, by = c("state"= "state")) %>%
left_join(elec_col[ , colSums(is.na(elec_col)) == 0], by = c("state" = "State")) %>% left_join(vep_df %>% filter(year == 2016),
by = c("state"="state"))
colnames(sim_df) <- c("trump_p", "t_se","res_t","state","t_v","alpha_trump","beta_trump", "biden_p", "b_se","res_b","b_v","alpha_biden","beta_biden", "year", "EC", "temp", "VEP", "VAP")
sim_df <- sim_df %>% select(state, trump_p, biden_p,alpha_trump, beta_trump, alpha_biden, beta_biden, EC, VEP)
sim_df <- sim_df %>% mutate_at(vars(VEP), funs(round(.)))
vep_std <- vep_df %>%
group_by(state) %>%
summarise(vep_sd = sd(VEP))
sim_df <- sim_df %>% left_join(vep_std, by = c("state" = "state"))
View(sim_df)
results_df <- data.frame(state = character(0), trump_v = numeric(0),
biden_v = numeric(0), EC = numeric(0)  , sim = numeric(0))
count = 10000
for(st in sim_df$state){
temp_df <- sim_df %>% filter(state == st)
trump_vote <- rbinom(n=count, size = round(rnorm(count, temp_df$VEP, temp_df$vep_sd)), prob = rbeta(count, temp_df$alpha_trump, temp_df$beta_trump))
biden_vote <- rbinom(n=count, size = round(rnorm(count, temp_df$VEP, sd = temp_df$vep_sd)), prob = rbeta(count, temp_df$alpha_biden, temp_df$beta_biden))
res_st <- cbind.data.frame(st, trump_vote, biden_vote, rep(temp_df$EC, count), seq(from = 1, to = count, by = 1))
colnames(res_st) = c("state", "trump_v", "biden_v", "EC","sim")
results_df <- rbind(results_df, res_st)
}
results_df <- results_df %>% mutate(win = case_when(trump_v > biden_v ~ "Trump",
trump_v < biden_v ~ "Biden",
trump_v == biden_v ~ "Tie"))
ec_results <- aggregate(results_df$EC, results_df %>% select(win, sim), FUN = sum)
biden_votes <- aggregate(results_df$biden_v, results_df %>% select(sim), FUN = sum)
trump_votes <- aggregate(results_df$trump_v, results_df %>% select(sim), FUN = sum)
View(ec_results)
set.seed(1234)
count = 10000
for(st in sim_df$state){
temp_df <- sim_df %>% filter(state == st)
trump_vote <- rbinom(n=count, size = round(rnorm(count, temp_df$VEP, 1.5*temp_df$vep_sd)), prob = rbeta(count, temp_df$alpha_trump, temp_df$beta_trump))
biden_vote <- rbinom(n=count, size = round(rnorm(count, temp_df$VEP, sd = 1.5*temp_df$vep_sd)), prob = rbeta(count, temp_df$alpha_biden, temp_df$beta_biden))
res_st <- cbind.data.frame(st, trump_vote, biden_vote, rep(temp_df$EC, count), seq(from = 1, to = count, by = 1))
colnames(res_st) = c("state", "trump_v", "biden_v", "EC","sim")
results_df <- rbind(results_df, res_st)
}
results_df <- data.frame(state = character(0), trump_v = numeric(0),
biden_v = numeric(0), EC = numeric(0)  , sim = numeric(0))
set.seed(1234)
count = 10000
for(st in sim_df$state){
temp_df <- sim_df %>% filter(state == st)
trump_vote <- rbinom(n=count, size = round(rnorm(count, temp_df$VEP, 1.5*temp_df$vep_sd)), prob = rbeta(count, temp_df$alpha_trump, temp_df$beta_trump))
biden_vote <- rbinom(n=count, size = round(rnorm(count, temp_df$VEP, sd = 1.5*temp_df$vep_sd)), prob = rbeta(count, temp_df$alpha_biden, temp_df$beta_biden))
res_st <- cbind.data.frame(st, trump_vote, biden_vote, rep(temp_df$EC, count), seq(from = 1, to = count, by = 1))
colnames(res_st) = c("state", "trump_v", "biden_v", "EC","sim")
results_df <- rbind(results_df, res_st)
}
results_df <- results_df %>% mutate(win = case_when(trump_v > biden_v ~ "Trump",
trump_v < biden_v ~ "Biden",
trump_v == biden_v ~ "Tie"))
results_df <- na.omit(results_df)
ec_results <- aggregate(results_df$EC, results_df %>% select(win, sim), FUN = sum)
biden_votes <- aggregate(results_df$biden_v, results_df %>% select(sim), FUN = sum)
trump_votes <- aggregate(results_df$trump_v, results_df %>% select(sim), FUN = sum)
View(ec_results)
ggplot(ec_results, aes(x = x, group = win, fill = win), alpha = 0.5 ) +
geom_histogram() +
labs(x="Electoral College Results", y="Frequency", color = "Legend") + ggtitle("Predicted Electoral College Results") +
scale_fill_manual(values=c("Blue", "Red"))
results_df <- data.frame(state = character(0), trump_v = numeric(0),
biden_v = numeric(0), EC = numeric(0)  , sim = numeric(0))
set.seed(1234)
count = 10000
for(st in sim_df$state){
temp_df <- sim_df %>% filter(state == st)
trump_vote <- rbinom(n=count, size = round(rnorm(count, temp_df$VEP, temp_df$vep_sd)), prob = rbeta(count, temp_df$alpha_trump, temp_df$beta_trump))
biden_vote <- rbinom(n=count, size = round(rnorm(count, temp_df$VEP, sd = temp_df$vep_sd)), prob = rbeta(count, temp_df$alpha_biden, temp_df$beta_biden))
res_st <- cbind.data.frame(st, trump_vote, biden_vote, rep(temp_df$EC, count), seq(from = 1, to = count, by = 1))
colnames(res_st) = c("state", "trump_v", "biden_v", "EC","sim")
results_df <- rbind(results_df, res_st)
}
results_df <- results_df %>% mutate(win = case_when(trump_v > biden_v ~ "Trump",
trump_v < biden_v ~ "Biden",
trump_v == biden_v ~ "Tie"))
results_df <- na.omit(results_df)
ec_results <- aggregate(results_df$EC, results_df %>% select(win, sim), FUN = sum)
biden_votes <- aggregate(results_df$biden_v, results_df %>% select(sim), FUN = sum)
trump_votes <- aggregate(results_df$trump_v, results_df %>% select(sim), FUN = sum)
ggplot(ec_results, aes(x = x, group = win, fill = win), alpha = 0.5 ) +
geom_histogram() +
labs(x="Electoral College Results", y="Frequency", color = "Legend") + ggtitle("Predicted Electoral College Results") +
scale_fill_manual(values=c("Blue", "Red"))
ggplot(ec_results, aes(x = x, group = win, fill = win), alpha = 0.5 ) +
geom_histogram() +
labs(x="Electoral College Results", y="Frequency", color = "Legend") + ggtitle("Predicted Electoral College Results") +
scale_fill_manual(values=c("Blue", "Red"))
View(ec_results)
ggplot(ec_results, aes(x = x, group = win, fill = win), alpha = 0.5 ) +
geom_histogram() +
labs(x="Electoral College Results", y="Frequency", color = "Legend") + ggtitle("Predicted Electoral College Results") +
scale_fill_manual(values=c("Blue", "Red", "Grey"))
ggplot(ec_results, aes(x = x, group = win, fill = win), alpha = 0.5 ) +
geom_histogram() +
labs(x="Electoral College Results", y="Frequency", color = "Legend") + ggtitle("Predicted Electoral College Results") +
scale_fill_manual(values=c("Blue","Grey","Red"))
View(accuracy_table)
install.packages(c("stargazer", "texreg"))
graph_df <- accuracy_table %>% select(year, Incumbency_Control, Party_Control)
colnames(graph_df) <- c("Year", "Incumbency Model Accuracy", "Party Model Accuracy")
View(graph_df)
graph_df <- melt(graph_df, id = c("Year"))
View(graph_df)
graph_df <- accuracy_table %>% select(year, Incumbency_Control, Party_Control)
colnames(graph_df) <- c("Year", "Incumbency Model", "Party Model")
graph_df <- melt(graph_df, id = c("Year"))
colnames(graph_df) <- c("Year", "Model", "Accuracy")
ggplot(graph_df, aes(x = Year, y = Accuracy, group = Model)) + geom_point
ggplot(graph_df, aes(x = Year, y = Accuracy, group = Model)) + geom_point()
ggplot(graph_df, aes(x = Year, y = Accuracy, group = Model, hue = Model)) + geom_point()
ggplot(graph_df, aes(x = Year, y = Accuracy, group = Model, color = Model)) + geom_point()
ggplot(graph_df, aes(x = Year, y = Accuracy, group = Model, color = Model)) + geom_point() + geom_line()
lockdown_theme2 <- function() {theme_minimal() %+replace%
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "grey"),
legend.key = element_rect(fill="transparent", colour=NA),
plot.title = element_text(size=32,   hjust = 0, vjust = 0),
plot.subtitle = element_text(size=32,   hjust = 1, vjust=1),
plot.caption = element_text(size=8,  hjust = 1),
axis.text =element_text(size=32,  ),
axis.title =element_text(size=32, ),
legend.title=element_text(size=32,  ),
legend.text=element_text(size=32,  ),
legend.position = c(0.85,0.85),
plot.title.position="plot",
plot.caption.position = "plot")
}
ggplot(graph_df, aes(x = Year, y = Accuracy, group = Model, color = Model)) + geom_point() +
geom_line() + lockdown_theme2()
ggplot(graph_df, aes(x = Year, y = Accuracy, group = Model, color = Model)) + geom_point() +
geom_line() + lockdown_minimal()
ggplot(graph_df, aes(x = Year, y = Accuracy, group = Model, color = Model)) + geom_point() +
geom_line() + theme_minimal()
ggplot(graph_df, aes(x = Year, y = Accuracy, group = Model, color = Model)) + geom_point() +
geom_line() + theme_minimal() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggplot(graph_df, aes(x = Year, y = Accuracy, group = Model, color = Model)) + geom_point() +
geom_line() + theme_minimal() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "grey"),
legend.key = element_rect(fill="transparent", colour=NA))
ggplot(graph_df, aes(x = Year, y = Accuracy, group = Model, color = Model)) + geom_point() +
geom_line() + theme_minimal() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "grey"),
legend.key = element_rect(fill="transparent", colour=NA))
ggplot(graph_df, aes(x = Year, y = Accuracy, group = Model, color = Model)) + geom_point() +
geom_line() + theme_minimal() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "grey"),
legend.key = element_rect(fill="transparent", colour=NA))+
scale_fill_manual(values=c("Blue","Red"))
ggplot(graph_df, aes(x = Year, y = Accuracy, group = Model, color = Model)) + geom_point() +
geom_line() + theme_minimal() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "grey"),
legend.key = element_rect(fill="transparent", colour=NA))+
scale_color_manual(values=c("Blue","Red"))
ggplot(graph_df, aes(x = Year, y = Accuracy, group = Model, color = Model)) + geom_point() +
geom_line() + theme_minimal() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "grey"),
legend.key = element_rect(fill="transparent", colour=NA))+
scale_color_manual(values=c("deepskyblue","firebrick"))
ggplot(graph_df, aes(x = Year, y = Accuracy, group = Model, color = Model)) + geom_point() +
geom_line() + theme_minimal() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "grey"),
legend.key = element_rect(fill="transparent", colour=NA))+
scale_color_manual(values=c("deepskyblue","firebrick")) + labs(title = "Prediction Accuracy Over Time")
View(accuracy_table)
View(party_cont_df)
View(outsamp)
View(outsamp)
wrong_class <- outsamp %>% group_by(year) %>% select(inc_control_correct, party_control_correct) %>%
filter(inc_control_correct == FALSE | party_control_correct == FALSE)
View(wrong_class)
wrong_class <- outsamp %>% group_by(year) %>% select(year, state, inc_control_correct, party_control_correct) %>%
filter(inc_control_correct == FALSE | party_control_correct == FALSE)
View(wrong_class)
wrong_inc <- wrong_class %>% filter(inc_control_correct==FALSE)%>%select(year, state)
View(wrong_inc)
wrong_inc <- wrong_inc %>%
group_by(year) %>%
mutate(States=map_chr(state, ~toString(setdiff(state, .x))))
View(wrong_inc)
wrong_inc <- wrong_inc %>%
group_by(year) %>%
mutate(States=map_chr(state, toString(setdiff(state, .x))))
wrong_inc <- wrong_inc %>%
group_by(year) %>%
mutate(States=map_chr(state, ~toString(state)))
View(wrong_inc)
wrong_inc <- wrong_inc %>%
group_by(year) %>%
mutate(States=map_chr(state, ~toString(state))) %>% select(year, States)
View(wrong_inc)
wrong_inc <- wrong_inc %>%
group_by(year) %>%
mutate(States=map_chr(state, ~toString(state))) %>% select(year, States) %>% group_by(year)
wrong_inc <- wrong_class %>% filter(inc_control_correct==FALSE)%>%select(year, state)
wrong_inc <- wrong_inc %>%
group_by(year) %>%
mutate(States=map_chr(state, ~toString(state))) %>% select(year, States) %>% group_by(year)
View(wrong_inc)
wrong_inc = wrong_inc[!duplicated(wrong_inc$State),]
wrong_inc = wrong_inc[!duplicated(wrong_inc$States),]
View(wrong_inc)
wrong_full <- wrong_inc %>% left_join(wrong_party, by = c("year" = "year"))
wrong_inc <- wrong_class %>% filter(inc_control_correct==FALSE)%>%select(year, state)
wrong_inc <- wrong_inc %>%
group_by(year) %>%
mutate(States=map_chr(state, ~toString(state))) %>% select(year, States) %>% group_by(year)
wrong_inc = wrong_inc[!duplicated(wrong_inc$States),]
wrong_party <- wrong_class %>% filter(party_control_correct==FALSE)%>%select(year, state)
wrong_party <- wrong_party %>%
group_by(year) %>%
mutate(States=map_chr(state, ~toString(state))) %>% select(year, States) %>% group_by(year)
wrong_party = wrong_party[!duplicated(wrong_party$States),]
wrong_full <- wrong_inc %>% left_join(wrong_party, by = c("year" = "year"))
View(wrong_full)
View(sim_df)
ggplot(ec_results, aes(x = x, group = win, fill = win), alpha = 0.5 ) +
geom_histogram() +
labs(x="Electoral College Results", y="Frequency", color = "Legend") + ggtitle("Predicted Electoral College Results") +
scale_fill_manual(values=c("Blue","Grey","Red"))
ggplot(ec_results, aes(x = x, group = win, fill = win), alpha = 0.5 ) +
geom_histogram(bins = 200) +
labs(x="Electoral College Results", y="Frequency", color = "Legend") + ggtitle("Predicted Electoral College Results") +
scale_fill_manual(values=c("Blue","Grey","Red"))
ggplot(ec_results, aes(x = x, group = win, fill = win), alpha = 0.5 ) +
geom_histogram(bins = 10000) +
labs(x="Electoral College Results", y="Frequency", color = "Legend") + ggtitle("Predicted Electoral College Results") +
scale_fill_manual(values=c("Blue","Grey","Red"))
ggplot(ec_results, aes(x = x, group = win, fill = win), alpha = 0.5 ) +
geom_histogram(bins = 1000) +
labs(x="Electoral College Results", y="Frequency", color = "Legend") + ggtitle("Predicted Electoral College Results") +
scale_fill_manual(values=c("Blue","Grey","Red"))
view(ec_results)
colnames(ec_results) <- c("Electoral College Total", "sim", "x")
ggplot(ec_results, aes(x = x, group = win, fill = win), alpha = 0.5 ) +
geom_histogram(bins = 400) +
labs(x="Electoral College Results", y="Frequency", color = "Legend") + ggtitle("Predicted Electoral College Results") +
scale_fill_manual(values=c("Blue","Grey","Red"))
ggplot(ec_results, aes(x = x, group = Electoral College Total, fill = win), alpha = 0.5 ) +
geom_histogram(bins = 400) +
labs(x="Electoral College Results", y="Frequency", color = "Legend") + ggtitle("Predicted Electoral College Results") +
scale_fill_manual(values=c("Blue","Grey","Red"))
ggplot(ec_results, aes(x = x, group = "Electoral College Total", fill = win), alpha = 0.5 ) +
geom_histogram(bins = 400) +
labs(x="Electoral College Results", y="Frequency", color = "Legend") + ggtitle("Predicted Electoral College Results") +
scale_fill_manual(values=c("Blue","Grey","Red"))
ggplot(ec_results, aes(x = x, group = "Electoral College Total", fill = "Electoral College Total"), alpha = 0.5 ) +
geom_histogram(bins = 400) +
labs(x="Electoral College Results", y="Frequency", color = "Legend") + ggtitle("Predicted Electoral College Results") +
scale_fill_manual(values=c("Blue","Grey","Red"))
ec_results <- aggregate(results_df$EC, results_df %>% select(win, sim), FUN = sum)
ggplot(ec_results, aes(x = x, group = win, fill = win), alpha = 0.5 ) +
geom_histogram(bins = 400) +
labs(x="Electoral College Results", y="Frequency", color = "Legend") + ggtitle("Predicted Electoral College Results") +
scale_fill_manual(values=c("Blue","Grey","Red"))
ggplot(ec_results, aes(x = x, group = win, fill = win), alpha = 0.5 ) +
geom_histogram(bins = 300) +
labs(x="Electoral College Results", y="Frequency", color = "Legend") + ggtitle("Predicted Electoral College Results") +
scale_fill_manual(values=c("Blue","Grey","Red"))
set.seed(1234)
count = 10000
for(st in sim_df$state){
temp_df <- sim_df %>% filter(state == st)
turnout <- round(rnorm(count, temp_df$VEP, temp_df$vep_sd))
trump_vote <- rbinom(n=count, size = round(rnorm(count, turnout, temp_df$vep_sd)), prob = rbeta(count, temp_df$alpha_trump, temp_df$beta_trump))
biden_vote <- rbinom(n=count, size = round(rnorm(count, turnout, sd = temp_df$vep_sd)), prob = rbeta(count, temp_df$alpha_biden, temp_df$beta_biden))
res_st <- cbind.data.frame(st, trump_vote, biden_vote, rep(temp_df$EC, count), seq(from = 1, to = count, by = 1))
colnames(res_st) = c("state", "trump_v", "biden_v", "EC","sim")
results_df <- rbind(results_df, res_st)
}
results_df <- data.frame(state = character(0), trump_v = numeric(0),
biden_v = numeric(0), EC = numeric(0)  , sim = numeric(0))
set.seed(1234)
count = 10000
for(st in sim_df$state){
temp_df <- sim_df %>% filter(state == st)
turnout <- round(rnorm(count, temp_df$VEP, temp_df$vep_sd))
trump_vote <- rbinom(n=count, size = round(rnorm(count, turnout, temp_df$vep_sd)), prob = rbeta(count, temp_df$alpha_trump, temp_df$beta_trump))
biden_vote <- rbinom(n=count, size = round(rnorm(count, turnout, temp_df$vep_sd)), prob = rbeta(count, temp_df$alpha_biden, temp_df$beta_biden))
res_st <- cbind.data.frame(st, trump_vote, biden_vote, rep(temp_df$EC, count), seq(from = 1, to = count, by = 1))
colnames(res_st) = c("state", "trump_v", "biden_v", "EC","sim")
results_df <- rbind(results_df, res_st)
}
results_df <- results_df %>% mutate(win = case_when(trump_v > biden_v ~ "Trump",
trump_v < biden_v ~ "Biden",
trump_v == biden_v ~ "Tie"))
results_df <- na.omit(results_df)
ec_results <- aggregate(results_df$EC, results_df %>% select(win, sim), FUN = sum)
biden_votes <- aggregate(results_df$biden_v, results_df %>% select(sim), FUN = sum)
trump_votes <- aggregate(results_df$trump_v, results_df %>% select(sim), FUN = sum)
ggplot(ec_results, aes(x = x, group = win, fill = win), alpha = 0.5 ) +
geom_histogram(bins = 300) +
labs(x="Electoral College Results", y="Frequency", color = "Legend") + ggtitle("Predicted Electoral College Results") +
scale_fill_manual(values=c("Blue","Grey","Red"))
ggplot(ec_results, aes(x = x, group = win, fill = win), alpha = 0.5 ) +
geom_histogram(bins = 300) +
labs(x="Electoral College Results", y="Frequency", color = "Legend") + ggtitle("Predicted Electoral College Results") +
scale_fill_manual(values=c("Blue","Grey","Red")) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "grey"),
legend.key = element_rect(fill="transparent", colour=NA))+
scale_color_manual(values=c("deepskyblue","firebrick")) + labs(title = "Prediction Accuracy Over Time")
ggplot(ec_results, aes(x = x, group = win, fill = win), alpha = 0.5 ) +
geom_histogram(bins = 300) +
labs(x="Electoral College Results", y="Frequency", color = "Legend") + ggtitle("Predicted Electoral College Results") +
scale_fill_manual(values=c("Blue","Grey","Red")) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "grey"),
legend.key = element_rect(fill="transparent", colour=NA))+
scale_color_manual(values=c("deepskyblue","firebrick")) +
labs(title = "Electoral College Results from 10000 Simulations",
fill = "Electoral College Total")
ggplot(ec_results, aes(x = x, group = win, fill = win), alpha = 0.5 ) +
geom_histogram(bins = 300) +
labs(x="Electoral College Results", y="Frequency", color = "Legend") + ggtitle("Predicted Electoral College Results") +
scale_fill_manual(values=c("Blue","Grey","Red")) +
scale_color_manual(values=c("deepskyblue","firebrick")) +
labs(title = "Electoral College Results from 10000 Simulations",
fill = "Electoral College Total")
+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "grey"),
legend.key = element_rect(fill="transparent", colour=NA))
ggplot(ec_results, aes(x = x, group = win, fill = win), alpha = 0.5 ) +
geom_histogram(bins = 300) +
labs(x="Electoral College Results", y="Frequency", color = "Legend") + ggtitle("Predicted Electoral College Results") +
scale_fill_manual(values=c("Blue","Grey","Red")) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "grey"),
legend.key = element_rect(fill="transparent", colour=NA))+
scale_color_manual(values=c("deepskyblue","firebrick")) +
labs(title = "Electoral College Results from 10000 Simulations",
fill = "Electoral College Total")
view(ec_results)
ec_results(x == 270)
ec_results[x == 270]
ec_results[ec_results$x == 270]
ec_results
ec_results[ec_results$x == 270]
ec_wins <- ec_results %>% group_by(win) %>% count()
View(ec_wins)
ec_wins <- reshape(ec_resuluts, id = "wins")
ec_wins <- reshape(ec_resuluts, id = c("wins"))
ec_wins <- reshape(ec_results, id = c("wins"))
ec_wins <- reshape(ec_results, idvar = "wins")
ec_wins <- reshape(ec_results, idvar = "wins", direction = "wide")
View(ec_results)
ec_wins <- reshape(ec_results, idvar = "win", direction = "wide")
ec_wins <- reshape(ec_results, timevar = c("win"), idvar = "x", direction = "wide")
View(ec_wins)
ec_wins <- melt(ec_results, idvar = "win")
View(ec_wins)
ec_wins <- melt(ec_results, idvar = c("win", sim))
ec_wins <- ec_results %>% spread(win)
View(ec_results)
ec_wins <- ec_results %>% spread(win, x)
View(ec_wins)
ec_wins <- ec_results %>% spread(win, x) %>% mutate(winner = case_when(Biden > Trump ~ "Biden",
Trump > Biden ~ "Trump",
Biden == Trump ~ "Tie"))
View(ec_wins)
ec_wins %>% select(winner) %>% count()
ec_wins %>%  count()
ec_vic <- aggregate(ec_wins$winner, ec_wins %>% select(winner), FUN = count())
ec_wins %>% group_by(winner) %>% count()
View(ec_wins)
