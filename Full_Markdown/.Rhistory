summary(dem_log_base)
summary(rep_log_base)
summary(dem_log_cont)
summary(rep_log_cont)
model_list <- c("Incumbent", "Challenger", "Democrat", "Republican")
red_dev <- c(inc_log_cont$deviance, chl_log_cont$deviance, dem_log_cont$deviance, rep_log_cont$deviance)
null_dev <- c(inc_log_cont$null.deviance, chl_log_cont$null.deviance, dem_log_cont$null.deviance, rep_log_cont$null.deviance)
dev_df <- cbind.data.frame(model_list, null_dev, red_dev)
View(dev_df)
colnames(dev_df) <- c("Model", "Null Deviance", "Residual Deviance")
knitr::opts_chunk$set(echo = TRUE)
##libraries
library(tidyverse)
library(ggplot2)
library(usmap)
library(janitor)
library(usmap)
library(data.table)
library(geofacet) ## map-shaped grid of ggplots
library(stargazer)
# read in all data
nat_popvote_df <- read_csv("../Data/popvote_1948-2016.csv")
nat_poll_df    <- read_csv("../Data/pollavg_1968-2016.csv")
state_popvote_df <- read_csv("../Data/popvote_bystate_1948-2016.csv")
state_poll_df <- read_csv("../Data/pollavg_bystate_1968-2016.csv")
nat_econ <- read_csv("../Data/econ.csv")
state_rdi <- read_csv("../Data/state_rdi.csv")
vep_df <- read_csv("../Data/vep_1980-2016.csv")
# clean data
#build state df with econ, polls, and
weeks <- 1
poll_df <- state_poll_df %>% filter(weeks_left >= weeks, weeks_left<5) %>%
select(year, state, party, candidate_name, avg_poll) %>%
group_by(year, state, candidate_name, party) %>%
summarize(avg_poll = mean(avg_poll))
#build economic df at state level from rdi and national gdp
econ_df <- state_rdi[,1:2]
colnames(econ_df) <- c("state","rdi_q2")
econ_df$rdi_q2 <- as.numeric(econ_df$rdi_q2)
for(i in seq(from = 18, to = 290, by = 16)){
temp <- state_rdi[,c(1,i)]
colnames(temp) <- c("state","rdi_q2")
temp$rdi_q2 <- as.numeric(temp$rdi_q2)
econ_df <- rbind(econ_df, temp)
}
#add years and national gdp growth
year_list <- seq(from = 1948, to = 2020, by=4)
year_append <- rep(year_list[1],51)
nat_econ_sub <- nat_econ %>% filter(year %in% year_list, quarter == 2) %>%
select(year, GDP_growth_qt)
gdp_append <- as.numeric(rep(nat_econ_sub[1,2],51))
for(i in seq(from = 2, to=length(year_list), by =1)){
new_year = rep(year_list[i], 51)
new_gdp = as.numeric(rep(nat_econ_sub[i,2], 51))
year_append = append(year_append, new_year)
gdp_append = append(gdp_append, new_gdp)
}
#append year and national gdp to the econ df
econ_df$year <- year_append
econ_df$gdp <- gdp_append
## Merge datasets and clean
pol_data <- nat_popvote_df %>% select("year","party","winner", "incumbent","incumbent_party")
reg_df <- poll_df %>% left_join(econ_df, by=c("state"="state","year"="year")) %>%
left_join(state_popvote_df, by= c("state"="state", "year"="year")) %>%
left_join(pol_data,
by  = c("year"="year","party" = "party" ))
reg_df <- reg_df %>%
mutate(inc_party = case_when((party=="democrat" & incumbent_party==TRUE) ~ "democrat",
(party=="democrat" & incumbent_party==FALSE) ~ "republican",
(party=="republican" & incumbent_party==TRUE) ~ "republican",
(party=="republican" & incumbent_party==FALSE) ~ "democrat")) %>%
mutate(chl_party = case_when((party=="democrat" & incumbent_party==FALSE) ~ "democrat",
(party=="democrat" & incumbent_party==TRUE) ~ "republican",
(party=="republican" & incumbent_party==FALSE) ~ "republican",
(party=="republican" & incumbent_party==TRUE) ~ "democrat"))
reg_df <- reg_df %>%
mutate(inc_pv = case_when((inc_party=="republican") ~ R_pv2p,
(inc_party=="democrat") ~ D_pv2p)) %>%
mutate(chl_pv = case_when(chl_party == "democrat" ~ D_pv2p,
chl_party == "republican" ~ R_pv2p))
reg_df <- reg_df %>% mutate(incumbent_win = case_when(inc_party == "republican" & R_pv2p > D_pv2p ~ 1,
inc_party == "republican" & R_pv2p < D_pv2p ~ 0,
inc_party == "democrat" & R_pv2p < D_pv2p ~ 1,
inc_party == "democrat" & R_pv2p > D_pv2p ~ 0))
reg_df <- reg_df %>%
mutate(inc_votes = case_when((inc_party=="republican") ~ R,
(inc_party=="democrat") ~ D)) %>%
mutate(chl_votes = case_when(chl_party == "democrat" ~ D,
chl_party == "republican" ~ R))
reg_df <- reg_df %>% left_join(vep_df, by = c("state" = "state", "year" = "year"))
reg_df <- na.omit(reg_df)
reg_df <- reg_df %>% mutate_at(vars(VEP), funs(round(.)))
## do regressions for in sample fit
inc_log_base <- glm(cbind(inc_votes, VEP-inc_votes) ~ rdi_q2 + gdp + state + avg_poll,
data = reg_df %>% filter(year < 2020, incumbent_party == TRUE), family=binomial)
chl_log_base <- glm(cbind(chl_votes, VEP-chl_votes) ~ rdi_q2 + gdp + state + avg_poll,
data = reg_df %>% filter(year < 2020, incumbent_party == FALSE), family=binomial)
inc_log_cont <- glm(cbind(inc_votes, VEP-inc_votes) ~ rdi_q2 + gdp + state + avg_poll+ inc_party,
data = reg_df %>% filter(year < 2020, incumbent_party == TRUE), family=binomial)
chl_log_cont <- glm(cbind(chl_votes, VEP-chl_votes) ~ rdi_q2 + gdp + state + avg_poll + inc_party,
data = reg_df %>% filter(year < 2020, incumbent_party == FALSE), family=binomial)
## summaries of models
# summary(inc_log_base)
# summary(chl_log_base)
# summary(inc_log_cont)
# summary(chl_log_cont)
##
## do regressions for in sample fit
dem_log_base <- glm(cbind(D, VEP-D) ~ rdi_q2 + gdp + state + avg_poll,
data = reg_df %>% filter(year < 2020, party == "democrat"), family=binomial)
rep_log_base <- glm(cbind(R, VEP-R) ~ rdi_q2 + gdp + state + avg_poll,
data = reg_df %>% filter(year < 2020, party == "republican"), family=binomial)
dem_log_cont <- glm(cbind(D, VEP-D) ~ rdi_q2 + gdp + state + avg_poll+ incumbent_party,
data = reg_df %>% filter(year < 2020, party == "democrat"), family=binomial)
rep_log_cont <- glm(cbind(R, VEP-R) ~ rdi_q2 + gdp + state + avg_poll + incumbent_party,
data = reg_df %>% filter(year < 2020, party == "republican"), family=binomial)
## summaries of models
# summary(dem_log_base)
# summary(rep_log_base)
# summary(dem_log_cont)
# summary(rep_log_cont)
model_list <- c("Incumbent", "Challenger", "Democrat", "Republican")
red_dev <- c(inc_log_cont$deviance, chl_log_cont$deviance, dem_log_cont$deviance, rep_log_cont$deviance)
null_dev <- c(inc_log_cont$null.deviance, chl_log_cont$null.deviance, dem_log_cont$null.deviance, rep_log_cont$null.deviance)
dev_df <- cbind.data.frame(model_list, null_dev, red_dev)
colnames(dev_df) <- c("Model", "Null Deviance", "Residual Deviance")
library(kableExtra)
kbl(dev_df)  %>% kable_paper(full_width = F) %>% kable_styling(position = "center")
check_out <- function(year, state){
#check
check <- reg_df$inc_pv[reg_df$year == year & reg_df$state == state & reg_df$incumbent_party == TRUE]
if (length(check)>0){
#dataframes excluding the row (incumbency/party is backwards as everything is negated)
inc_df <- reg_df %>% filter(!(incumbent_party == FALSE & year == year & state == state))
chl_df <- reg_df %>% filter(!(incumbent_party == TRUE & year == year & state == state))
dem_df <- reg_df %>% filter(!(year == year && state == state && party == "republican"))
rep_df <- reg_df %>% filter(!(year == year && state == state && party == "democrat"))
#prediction dataframes
inc_p <- reg_df[reg_df$year == year & reg_df$state == state & reg_df$incumbent_party == TRUE,]
chl_p <- reg_df[reg_df$year == year & reg_df$state == state & reg_df$incumbent_party == FALSE,]
dem_p <- reg_df[reg_df$year == year & reg_df$state == state & reg_df$party == "democrat",]
rep_p <- reg_df[reg_df$year == year & reg_df$state == state & reg_df$party == "republican",]
#true vote shares
true_inc_share <- inc_p$inc_votes / inc_p$VEP
true_chl_share <- chl_p$chl_votes / chl_p$VEP
true_dem_share <- dem_p$D / dem_p$VEP
true_rep_share <- rep_p$R / rep_p$VEP
## incumbency model fit
inc_log_base_ <- glm(cbind(inc_votes, floor(VEP)-inc_votes) ~ rdi_q2 + gdp + state + avg_poll,
data = inc_df, family=binomial)
chl_log_base_ <- glm(cbind(chl_votes, floor(VEP)-chl_votes) ~ rdi_q2 + gdp + state + avg_poll,
data = chl_df, family=binomial)
inc_log_cont_ <- glm(cbind(inc_votes, floor(VEP)-inc_votes) ~ rdi_q2 + gdp + state + avg_poll+ inc_party,
data = inc_df, family=binomial)
chl_log_cont_ <- glm(cbind(chl_votes, floor(VEP)-chl_votes) ~ rdi_q2 + gdp + state + avg_poll + inc_party,
data = chl_df, family=binomial)
# incumbency model prediciton
pred_inc_base_ <- predict(inc_log_base_, inc_p, type = "response")[[1]]
pred_chl_base_ <- predict(chl_log_base_, chl_p, type = "response")[[1]]
pred_inc_cont_ <- predict(inc_log_cont_, inc_p, type = "response")[[1]]
pred_chl_cont_ <- predict(chl_log_cont_, chl_p, type = "response")[[1]]
##party model fit
dem_log_base_ <- glm(cbind(D, floor(VEP)-D) ~ rdi_q2 + gdp + state + avg_poll,
data = dem_df, family=binomial)
rep_log_base_ <- glm(cbind(R, floor(VEP)-R) ~ rdi_q2 + gdp + state + avg_poll,
data = rep_df, family=binomial)
dem_log_cont_ <- glm(cbind(D, floor(VEP)-D) ~ rdi_q2 + gdp + state + avg_poll+ incumbent_party,
data = dem_df, family=binomial)
rep_log_cont_ <- glm(cbind(R, floor(VEP)-R) ~ rdi_q2 + gdp + state + avg_poll + incumbent_party,
data = rep_df, family=binomial)
pred_dem_base_ <- predict(dem_log_base_, dem_p, type = "response")[[1]]
pred_rep_base_ <- predict(rep_log_base_, rep_p, type = "response")[[1]]
pred_dem_cont_ <- predict(dem_log_cont_, dem_p, type = "response")[[1]]
pred_rep_cont_ <- predict(rep_log_cont_, rep_p, type = "response")[[1]]
c(year, state,
incumbent_base = (pred_inc_base_ > pred_chl_base_) == (true_inc_share > true_chl_share),
incumbent_control = (pred_inc_cont_ > pred_chl_cont_) == (true_inc_share > true_chl_share),
party_base = (pred_dem_base_ > pred_rep_base_) == (true_dem_share > true_rep_share),
party_control = (pred_dem_cont_ > pred_rep_cont_) == (true_dem_share > true_rep_share)
)
}else{
c(NA, NA, NA, NA, NA, NA)
}
}
year_list <- seq(from = 1980, to = 2016, by = 4)
state_list <- unique(reg_df$state)
outsamp_dflist <- sapply(year_list, function(year){sapply(state_list, function(state) check_out(year,state))})
outsamp_df <- cbind("year", "state",
"inc_base_correct","inc_control_correct","party_base_correct",  "party_control_correct")
items <- 6
for(j in seq(from = 1, to = 10, by =1)){
for(i in seq(from = 1, to = 301, by = items)){
start <- i
stop <- i+items -1
temp <- outsamp_dflist[start:stop, j]
outsamp_df <- rbind(outsamp_df, temp)
}
}
rownames(outsamp_df) <- NULL
outsamp_df <- outsamp_df %>% row_to_names(row_number=1)
outsamp <- as.data.frame(na.omit(outsamp_df))
inc_df <- outsamp %>% group_by(year) %>% summarise(correct = sum(inc_base_correct == TRUE)) %>%
left_join(outsamp %>% count(year), by = c("year" = "year")) %>%
mutate(Incumbency = correct/n)
inc_cont_df <- outsamp %>% group_by(year) %>% summarise(correct = sum(inc_control_correct == TRUE)) %>%
left_join(outsamp %>% count(year), by = c("year" = "year")) %>%
mutate(Incumbency_Control = correct/n)
party_df <- outsamp %>% group_by(year) %>% summarise(correct = sum(inc_base_correct == TRUE)) %>%
left_join(outsamp %>% count(year), by = c("year" = "year")) %>%
mutate(Party = correct/n)
party_cont_df <- outsamp %>% group_by(year) %>% summarise(correct = sum(party_control_correct == TRUE)) %>%
left_join(outsamp %>% count(year), by = c("year" = "year")) %>%
mutate(Party_Control = correct/n)
accuracy_table <- inc_df %>% select(year, Incumbency) %>%
left_join(inc_cont_df %>% select(Incumbency_Control, year), by = c('year' = 'year')) %>%
left_join(party_df %>% select(Party, year), by = c('year' = 'year')) %>%
left_join(party_cont_df %>% select(Party_Control, year), by = c('year' = 'year'))
library(reshape2)
graph_df <- accuracy_table %>% select(year, Incumbency_Control, Party_Control)
colnames(graph_df) <- c("Year", "Incumbency Model", "Party Model")
graph_df <- melt(graph_df, id = c("Year"))
colnames(graph_df) <- c("Year", "Model", "Accuracy")
ggplot(graph_df, aes(x = Year, y = Accuracy, group = Model, color = Model)) + geom_point() +
geom_line() + theme_minimal() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "grey"),
legend.key = element_rect(fill="transparent", colour=NA))+
scale_color_manual(values=c("deepskyblue","firebrick")) + labs(title = "Prediction Accuracy Over Time")
wrong_class <- outsamp %>% group_by(year) %>% select(year, state, inc_control_correct, party_control_correct) %>%
filter(inc_control_correct == FALSE | party_control_correct == FALSE)
wrong_inc <- wrong_class %>% filter(inc_control_correct==FALSE)%>%select(year, state)
wrong_inc <- wrong_inc %>%
group_by(year) %>%
mutate(States=map_chr(state, ~toString(state))) %>% select(year, States) %>% group_by(year)
wrong_inc = wrong_inc[!duplicated(wrong_inc$States),]
wrong_party <- wrong_class %>% filter(party_control_correct==FALSE)%>%select(year, state)
wrong_party <- wrong_party %>%
group_by(year) %>%
mutate(States=map_chr(state, ~toString(state))) %>% select(year, States) %>% group_by(year)
wrong_party = wrong_party[!duplicated(wrong_party$States),]
wrong_full <- wrong_inc %>% left_join(wrong_party, by = c("year" = "year"))
colnames(wrong_full) <- c("Year", "States Incorrectly Predicted By Incumbency Model","States Incorrectly Predicted by State Model" )
kbl(wrong_full)  %>% kable_paper(full_width = F) %>% kable_styling(position = "center")
ggplot(ec_results, aes(x = x, group = win, fill = win), alpha = 0.5 ) +
geom_histogram(bins = 300) +
labs(x="Electoral College Results", y="Frequency", color = "Legend") + ggtitle("Predicted Electoral College Results") +
scale_fill_manual(values=c("dodgerblue2","firebrick1")) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "grey"),
legend.key = element_rect(fill="transparent", colour=NA))+
scale_color_manual(values=c("deepskyblue","firebrick")) +
labs(title = "Electoral College Results from 10000 Simulations",
fill = "Electoral College Total")
inc_reg_df <- reg_df %>% filter(incumbent_party == TRUE)
chl_reg_df <- reg_df %>% filter(incumbent_party == FALSE)
## regressions for in sample fit and prediction
inc_log_demo <- glm(cbind(inc_votes, VEP-inc_votes) ~ state + avg_poll + party + gdp + rdi_q2,
data = inc_reg_df, family=binomial)
chl_log_demo <- glm(cbind(chl_votes, floor(VEP)-chl_votes) ~ state + avg_poll + party + gdp + rdi_q2,
data = chl_reg_df, family=binomial)
## do predictions
## 2020 predictions
poll_2020_df <- read_csv("../Data/presidential_poll_averages_2020.csv")
elec_col <- read_csv("../Data/ElectoralCollegePost1948_adj.csv") %>% filter(Year==2020)
elec_col <- remove_empty(elec_col, which = c("cols"), quiet = TRUE)
elxnday_2020 <- as.Date("11/3/2020", "%m/%d/%Y")
dnc_2020 <- as.Date("8/20/2020", "%m/%d/%Y")
rnc_2020 <- as.Date("8/27/2020", "%m/%d/%Y")
colnames(poll_2020_df) <- c("year","state","poll_date","candidate_name","avg_support","avg_support_adj")
poll_2020_df <- poll_2020_df %>%
mutate(party = case_when(candidate_name == "Donald Trump" ~ "republican",
candidate_name == "Joseph R. Biden Jr." ~ "democrat"),
poll_date = as.Date(poll_date, "%m/%d/%Y")) %>%
mutate(days_left = round(difftime(elxnday_2020, poll_date, unit="days")),
weeks_left = round(difftime(elxnday_2020, poll_date, unit="weeks")),
before_convention = case_when(poll_date < dnc_2020 & party == "democrat" ~ TRUE,
poll_date < rnc_2020 & party == "republican" ~ TRUE,
TRUE ~ FALSE)) %>% filter(!is.na(party))
poll_2020_clean <- poll_2020_df %>% filter(weeks_left < 5, weeks_left >=weeks) %>%
group_by(state, candidate_name, party) %>%
summarize(avg_poll = mean(avg_support)) %>% filter(state != "National") %>%
select(state, candidate_name, avg_poll, party) %>% mutate(period = "1996-2020") %>%
mutate(incumbent_party = case_when(candidate_name == "Joseph R. Biden Jr." ~ FALSE,
candidate_name == "Donald Trump" ~ TRUE)) %>%
filter(state != "NE-1", state != "NE-2", state != "ME-1", state != "ME-2")
gdp <- rep(-0.0949, 102)
poll_2020_clean$gdp <- gdp
poll_2020_clean$avg_poll <- as.numeric(poll_2020_clean$avg_poll)
pred_data_df <- poll_2020_clean %>% left_join(state_rdi[,c(1,290)], c("state" = "State"))
colnames(pred_data_df) <- c("state", "candidate_name","avg_poll","party", "period", "incumbent_party","gdp", "rdi_q2")
pred_data_df <- pred_data_df %>% left_join(vep_df %>% filter(year == 2016), by = c("state"="state"))
# make state predictions and label them
trump_df <- pred_data_df %>% filter(incumbent_party == TRUE)
biden_df <- pred_data_df %>% filter(incumbent_party == FALSE)
pred_prob_trump <- as.data.frame(predict(inc_log_demo, newdata = trump_df, type = "response", se.fit = TRUE))
pred_prob_trump$state <- trump_df$state
pred_prob_trump <- as.data.frame(pred_prob_trump)
pred_prob_trump <- pred_prob_trump %>% mutate(var = se.fit^2)
pred_prob_biden <- as.data.frame(predict(chl_log_demo, newdata = biden_df, type = "response", se.fit = TRUE))
pred_prob_biden$state <- biden_df$state
pred_prob_biden <- as.data.frame(pred_prob_biden)
pred_prob_biden <- pred_prob_biden %>% mutate(var = se.fit^2)
estBetaParams <- function(mu, var) {
alpha <- ((1 - mu) / var - 1 / mu) * mu ^ 2
beta <- alpha * (1 / mu - 1)
return(params = list(alpha = alpha, beta = beta))
}
beta_vals_trump <- estBetaParams(pred_prob_trump$fit, pred_prob_trump$var)
beta_vals_trump <- do.call(cbind.data.frame, beta_vals_trump)
beta_vals_trump$state <- pred_prob_trump$state
pred_prob_trump <- pred_prob_trump %>% left_join(beta_vals_trump, by = c("state" = "state"))
beta_vals_biden <- estBetaParams(pred_prob_biden$fit, pred_prob_biden$var)
beta_vals_biden <- do.call(cbind.data.frame, beta_vals_biden)
beta_vals_biden$state <- pred_prob_biden$state
pred_prob_biden <- pred_prob_biden %>% left_join(beta_vals_biden, by = c("state" = "state"))
sim_df <- pred_prob_trump %>% left_join(pred_prob_biden, by = c("state"= "state")) %>%
left_join(elec_col[ , colSums(is.na(elec_col)) == 0], by = c("state" = "State")) %>% left_join(vep_df %>% filter(year == 2016),
by = c("state"="state"))
colnames(sim_df) <- c("trump_p", "t_se","res_t","state","t_v","alpha_trump","beta_trump", "biden_p", "b_se","res_b","b_v","alpha_biden","beta_biden", "year", "EC", "temp", "VEP", "VAP")
sim_df <- sim_df %>% select(state, trump_p, biden_p,alpha_trump, beta_trump, alpha_biden, beta_biden, EC, VEP)
sim_df <- sim_df %>% mutate_at(vars(VEP), funs(round(.)))
vep_std <- vep_df %>%
group_by(state) %>%
summarise(vep_sd = sd(VEP))
sim_df <- sim_df %>% left_join(vep_std, by = c("state" = "state"))
results_df <- data.frame(state = character(0), trump_v = numeric(0),
biden_v = numeric(0), EC = numeric(0)  , sim = numeric(0))
set.seed(1234)
count = 10000
for(st in sim_df$state){
temp_df <- sim_df %>% filter(state == st)
turnout <- round(rnorm(count, temp_df$VEP, 1.5*temp_df$vep_sd))
trump_vote <- rbinom(n=count, size = round(rnorm(count, turnout, temp_df$vep_sd)), prob = rbeta(count, temp_df$alpha_trump, temp_df$beta_trump))
biden_vote <- rbinom(n=count, size = round(rnorm(count, turnout, temp_df$vep_sd)), prob = rbeta(count, temp_df$alpha_biden, temp_df$beta_biden))
res_st <- cbind.data.frame(st, trump_vote, biden_vote, rep(temp_df$EC, count), seq(from = 1, to = count, by = 1))
colnames(res_st) = c("state", "trump_v", "biden_v", "EC","sim")
results_df <- rbind(results_df, res_st)
}
results_df <- results_df %>% mutate(win = case_when(trump_v > biden_v ~ "Trump",
trump_v < biden_v ~ "Biden"))
results_df <- na.omit(results_df)
ec_results <- aggregate(results_df$EC, results_df %>% select(win, sim), FUN = sum)
biden_votes <- aggregate(results_df$biden_v, results_df %>% select(sim), FUN = sum)
trump_votes <- aggregate(results_df$trump_v, results_df %>% select(sim), FUN = sum)
ec_wins <- ec_results %>% spread(win, x) %>% mutate(winner = case_when(Biden > Trump ~ "Biden",
Trump > Biden ~ "Trump",
Biden == Trump ~ "Tie"))
victors <- ec_wins %>% group_by(winner) %>% count()
pop_results <- biden_votes %>% left_join(trump_votes, by  =  ("sim" = "sim")) %>% mutate(biden_pv = x.x/(x.x+x.y), trump_pv = x.y/(x.x+x.y))
ggplot(ec_results, aes(x = x, group = win, fill = win), alpha = 0.5 ) +
geom_histogram(bins = 300) +
labs(x="Electoral College Results", y="Frequency", color = "Legend") + ggtitle("Predicted Electoral College Results") +
scale_fill_manual(values=c("dodgerblue2","firebrick1")) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "grey"),
legend.key = element_rect(fill="transparent", colour=NA))+
scale_color_manual(values=c("deepskyblue","firebrick")) +
labs(title = "Electoral College Results from 10000 Simulations",
fill = "Electoral College Total")
inc_reg_df <- reg_df %>% filter(incumbent_party == TRUE)
chl_reg_df <- reg_df %>% filter(incumbent_party == FALSE)
## regressions for in sample fit and prediction
inc_log_demo <- glm(cbind(inc_votes, VEP-inc_votes) ~ state + avg_poll + party + gdp + rdi_q2,
data = inc_reg_df, family=binomial)
chl_log_demo <- glm(cbind(chl_votes, floor(VEP)-chl_votes) ~ state + avg_poll + party + gdp + rdi_q2,
data = chl_reg_df, family=binomial)
## do predictions
## 2020 predictions
poll_2020_df <- read_csv("../Data/presidential_poll_averages_2020.csv")
elec_col <- read_csv("../Data/ElectoralCollegePost1948_adj.csv") %>% filter(Year==2020)
elec_col <- remove_empty(elec_col, which = c("cols"), quiet = TRUE)
elxnday_2020 <- as.Date("11/3/2020", "%m/%d/%Y")
dnc_2020 <- as.Date("8/20/2020", "%m/%d/%Y")
rnc_2020 <- as.Date("8/27/2020", "%m/%d/%Y")
colnames(poll_2020_df) <- c("year","state","poll_date","candidate_name","avg_support","avg_support_adj")
poll_2020_df <- poll_2020_df %>%
mutate(party = case_when(candidate_name == "Donald Trump" ~ "republican",
candidate_name == "Joseph R. Biden Jr." ~ "democrat"),
poll_date = as.Date(poll_date, "%m/%d/%Y")) %>%
mutate(days_left = round(difftime(elxnday_2020, poll_date, unit="days")),
weeks_left = round(difftime(elxnday_2020, poll_date, unit="weeks")),
before_convention = case_when(poll_date < dnc_2020 & party == "democrat" ~ TRUE,
poll_date < rnc_2020 & party == "republican" ~ TRUE,
TRUE ~ FALSE)) %>% filter(!is.na(party))
poll_2020_clean <- poll_2020_df %>% filter(weeks_left < 5, weeks_left >=weeks) %>%
group_by(state, candidate_name, party) %>%
summarize(avg_poll = mean(avg_support)) %>% filter(state != "National") %>%
select(state, candidate_name, avg_poll, party) %>% mutate(period = "1996-2020") %>%
mutate(incumbent_party = case_when(candidate_name == "Joseph R. Biden Jr." ~ FALSE,
candidate_name == "Donald Trump" ~ TRUE)) %>%
filter(state != "NE-1", state != "NE-2", state != "ME-1", state != "ME-2")
gdp <- rep(-0.0949, 102)
poll_2020_clean$gdp <- gdp
poll_2020_clean$avg_poll <- as.numeric(poll_2020_clean$avg_poll)
pred_data_df <- poll_2020_clean %>% left_join(state_rdi[,c(1,290)], c("state" = "State"))
colnames(pred_data_df) <- c("state", "candidate_name","avg_poll","party", "period", "incumbent_party","gdp", "rdi_q2")
pred_data_df <- pred_data_df %>% left_join(vep_df %>% filter(year == 2016), by = c("state"="state"))
# make state predictions and label them
trump_df <- pred_data_df %>% filter(incumbent_party == TRUE)
biden_df <- pred_data_df %>% filter(incumbent_party == FALSE)
pred_prob_trump <- as.data.frame(predict(inc_log_demo, newdata = trump_df, type = "response", se.fit = TRUE))
pred_prob_trump$state <- trump_df$state
pred_prob_trump <- as.data.frame(pred_prob_trump)
pred_prob_trump <- pred_prob_trump %>% mutate(var = se.fit^2)
pred_prob_biden <- as.data.frame(predict(chl_log_demo, newdata = biden_df, type = "response", se.fit = TRUE))
pred_prob_biden$state <- biden_df$state
pred_prob_biden <- as.data.frame(pred_prob_biden)
pred_prob_biden <- pred_prob_biden %>% mutate(var = se.fit^2)
estBetaParams <- function(mu, var) {
alpha <- ((1 - mu) / var - 1 / mu) * mu ^ 2
beta <- alpha * (1 / mu - 1)
return(params = list(alpha = alpha, beta = beta))
}
beta_vals_trump <- estBetaParams(pred_prob_trump$fit, pred_prob_trump$var)
beta_vals_trump <- do.call(cbind.data.frame, beta_vals_trump)
beta_vals_trump$state <- pred_prob_trump$state
pred_prob_trump <- pred_prob_trump %>% left_join(beta_vals_trump, by = c("state" = "state"))
beta_vals_biden <- estBetaParams(pred_prob_biden$fit, pred_prob_biden$var)
beta_vals_biden <- do.call(cbind.data.frame, beta_vals_biden)
beta_vals_biden$state <- pred_prob_biden$state
pred_prob_biden <- pred_prob_biden %>% left_join(beta_vals_biden, by = c("state" = "state"))
sim_df <- pred_prob_trump %>% left_join(pred_prob_biden, by = c("state"= "state")) %>%
left_join(elec_col[ , colSums(is.na(elec_col)) == 0], by = c("state" = "State")) %>% left_join(vep_df %>% filter(year == 2016),
by = c("state"="state"))
colnames(sim_df) <- c("trump_p", "t_se","res_t","state","t_v","alpha_trump","beta_trump", "biden_p", "b_se","res_b","b_v","alpha_biden","beta_biden", "year", "EC", "temp", "VEP", "VAP")
sim_df <- sim_df %>% select(state, trump_p, biden_p,alpha_trump, beta_trump, alpha_biden, beta_biden, EC, VEP)
sim_df <- sim_df %>% mutate_at(vars(VEP), funs(round(.)))
vep_std <- vep_df %>%
group_by(state) %>%
summarise(vep_sd = sd(VEP))
sim_df <- sim_df %>% left_join(vep_std, by = c("state" = "state"))
results_df <- data.frame(state = character(0), trump_v = numeric(0),
biden_v = numeric(0), EC = numeric(0)  , sim = numeric(0))
set.seed(1234)
count = 10000
for(st in sim_df$state){
temp_df <- sim_df %>% filter(state == st)
turnout <- round(rnorm(count, temp_df$VEP, 1.5*temp_df$vep_sd))
trump_vote <- rbinom(n=count, size = round(rnorm(count, turnout, temp_df$vep_sd)), prob = rbeta(count, temp_df$alpha_trump, temp_df$beta_trump))
biden_vote <- rbinom(n=count, size = round(rnorm(count, turnout, temp_df$vep_sd)), prob = rbeta(count, temp_df$alpha_biden, temp_df$beta_biden))
res_st <- cbind.data.frame(st, trump_vote, biden_vote, rep(temp_df$EC, count), seq(from = 1, to = count, by = 1))
colnames(res_st) = c("state", "trump_v", "biden_v", "EC","sim")
results_df <- rbind(results_df, res_st)
}
results_df <- results_df %>% mutate(win = case_when(trump_v > biden_v ~ "Trump",
trump_v < biden_v ~ "Biden"))
results_df <- na.omit(results_df)
ec_results <- aggregate(results_df$EC, results_df %>% select(win, sim), FUN = sum)
biden_votes <- aggregate(results_df$biden_v, results_df %>% select(sim), FUN = sum)
trump_votes <- aggregate(results_df$trump_v, results_df %>% select(sim), FUN = sum)
ec_wins <- ec_results %>% spread(win, x) %>% mutate(winner = case_when(Biden > Trump ~ "Biden",
Trump > Biden ~ "Trump",
Biden == Trump ~ "Tie"))
victors <- ec_wins %>% group_by(winner) %>% count()
pop_results <- biden_votes %>% left_join(trump_votes, by  =  ("sim" = "sim")) %>% mutate(biden_pv = x.x/(x.x+x.y), trump_pv = x.y/(x.x+x.y)) %>% mutate(winner = case_when(biden_pv > trump_pv ~ "Biden", trump_pv > biden_pv ~ "Trump"))
ec_hist <- ggplot(ec_results, aes(x = x, group = win, fill = win), alpha = 0.5 ) +
geom_histogram(bins = 300) +
labs(x="Electoral College Results", y="Frequency", color = "Legend") + ggtitle("Predicted Electoral College Results") +
scale_fill_manual(values=c("dodgerblue2","firebrick1")) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "grey"),
legend.key = element_rect(fill="transparent", colour=NA))+
scale_color_manual(values=c("deepskyblue","firebrick")) +
labs(title = "Electoral College Results from 10000 Simulations",
fill = "Electoral College Total")
pop_hist <- ggplot(pop_results, aes(x = x, group = winner, fill  = winner), alpha = 0.5) +
geom_density() +
labs(x = "Popular Vote Results", y = "Probability of Result")
library("gridExtra")
grid.arrange(ec_hist, pop_hist, ncol = 2)
View(pop_results)
View(ec_results)
pop_graph <- melt(pop_results, id = c("Sim"))
View(pop_results)
pop_graph <- melt(pop_results, id = c("sim"))
View(pop_graph)
View(pop_results)
View(pop_results)
ggplot(ec_results, aes(x = x, group = win, fill = win), alpha = 0.5 ) +
geom_histogram(bins = max(ec_results$win) - min(ec_results$win)) +
labs(x="Electoral College Results", y="Frequency", color = "Legend") + ggtitle("Predicted Electoral College Results") +
scale_fill_manual(values=c("dodgerblue2","firebrick1")) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "grey"),
legend.key = element_rect(fill="transparent", colour=NA))+
scale_color_manual(values=c("deepskyblue","firebrick")) +
labs(title = "Electoral College Results from 10000 Simulations",
fill = "Electoral College Total")
max(ec_results$win) - min(ec_results$win)
max(ec_results$win)
max(ec_results$x)
ggplot(ec_results, aes(x = x, group = win, fill = win), alpha = 0.5 ) +
geom_histogram(bins = max(ec_results$x) - min(ec_results$x)) +
labs(x="Electoral College Results", y="Frequency", color = "Legend") + ggtitle("Predicted Electoral College Results") +
scale_fill_manual(values=c("dodgerblue2","firebrick1")) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "grey"),
legend.key = element_rect(fill="transparent", colour=NA))+
scale_color_manual(values=c("deepskyblue","firebrick")) +
labs(title = "Electoral College Results from 10000 Simulations",
fill = "Electoral College Total")
